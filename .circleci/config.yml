version: 2.1

environment:
  APP_NAME: 'ap18light'
  WORKFLOW_ID: '${CIRCLE_WORKFLOW_ID:0:7}'

commands:
  install-tar-and-zip:
    steps:
      - run:
          name: Install tar and gzip
          command: |
            yum install tar -y
            yum install gzip -y

  install_awscli:
    steps:
      - run:
          name: Install AWS-CLI
          command: |
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  build-frontend:
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: echo "${APP_NAME}-frontend-${WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="${APP_NAME}" \
              --stack-name "${APP_NAME}-frontend-${WORKFLOW_ID}" \
              --parameter-overrides BucketName="${APP_NAME}-${WORKFLOW_ID}" \

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-tar-and-zip
      - run:
          name: Install dependencies
          command: |
            curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
            yum install nodejs -y
            cd frontend
            npm install

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${WORKFLOW_ID}".tar.gz out
            aws s3 cp out s3://"${APP_NAME}-${WORKFLOW_ID}" --recursive
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name cloudfront-stack \
            --parameter-overrides WorkflowID="${WORKFLOW_ID}" \
            --tags project="${APP_NAME}" \
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Remove old stack and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)

            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${WORKFLOW_ID}"
            echo Stack names: "${STACKS[@]}"

            if [[ "${WORKFLOW_ID}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://${APP_NAME}-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "${APP_NAME}-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: [staging]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [scan-frontend]
      - deploy-frontend:
          requires: [deploy-infrastructure]
