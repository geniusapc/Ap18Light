version: 2.1

executors:
  node_image:
    docker:
      - image: circleci/node:16.13.1
  aws_image:
    docker:
      - image: amazon/aws-cli
  base_image:
    docker:
      - image: amazon/aws-cli

commands:
  install-tar-and-zip:
    steps:
      - run:
          name: Install tar and gzip
          command: |
            yum install tar -y
            yum install gzip -y

  install_awscli:
    steps:
      - run:
          name: Install AWS-CLI
          command: |
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  build-frontend:
    executor: node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    executor: node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend test
          command: |
            cd frontend
            npm install
            npm run test

  scan-frontend:
    executor: node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    executor: aws_image
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="ap18light" \
              --stack-name "ap18light-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides BucketName="ap18light-${CIRCLE_WORKFLOW_ID:0:7}" \

  deploy-frontend:
    executor: aws_image
    steps:
      - checkout
      - install-tar-and-zip
      - run:
          name: Install dependencies
          command: |
            curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
            yum install nodejs -y
            cd frontend
            npm install

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz out
            aws s3 cp out s3://"ap18light-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
  cloudfront-update:
    executor: aws_image
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name cloudfront-stack-{CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project="ap18light" \
  cleanup:
    executor: aws_image
    steps:
      - checkout
      - run:
          name: Remove old stack and files
          command: |
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Stack names from ci: "${STACKS[@]}"

            chmod +x .circleci/files/cleanStacks.sh 
            .circleci/files/cleanStacks.sh ${CIRCLE_WORKFLOW_ID:0:7} "${STACKS[@]}"

workflows:
  default:
    jobs:
      # - build-frontend:
      #     filters:
      #       branches:
      #         only: [feat/deployment, staging]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [scan-frontend]
      # - deploy-frontend:
      #     requires: [deploy-infrastructure]
      - cleanup
          # requires: [deploy-frontend]
